Google Data Studio Pipeline with GCP/MySQL Client Background Client: A leading IT firm Europe Industry Type: IT Services: e-commerce, retail business, marketing, Consulting Organization Size: 100+ Project Objective Creating a Data Pipeline to sync live data FieldPulse to Google Data Studio using GCP/MySQL. Project Description There is a Virtual Machine up and running and MySQL Google Cloud(GCP). Get the following live data FieldPulse to Google Data Studio(GDS) for making Business Dashboard GDS – Job Data Tag Data Team Member Data Team Data Such that if data changes FieldPulse , GDS Dashboard should update automatically. Our Solution For fetching data FieldPulse – Data Pipeline (FieldPulse to GCP MySQL) : We have created a Data Pipeline that uses web scraping to fetch data FieldPulse. It makes a GET request to the FieldPulse API , and the API returns raw data. Convert this into json format then Dataframe. Now , create tables GCP MySQL and insert/update the data accordingly. Insertion & Updation of Data : Insertion : If any data fetched Fieldpulse is not present their respective database table , then insert that data the table. Updation : If any data fetched Fieldpulse is present their respective database table , then update that data the table. Deploy the above Data Pipeline GCP VM instance : Deploy the above data pipeline GCP VM that data gets updated every hour FieldPulse to MySQL. For getting data GCP MySQL to Google Data Studio(GDS) : Connecting GCP MySQL to Google Data Studio : Connect GCP MySQL to GDS as follows – Open a report on add data Choose MySQL connector Enter following : Host Name or IP : xxx.xxx.xxx.xxx Database : xyz Username : xyz Password : ********** Enable SSL Upload server-ca.pem certificate Upload client-cert.pem certificate Upload client-key.pem certificate Authenticate Add whatever table you want Build Visualization Project Deliverables Below are the services that we provided to client after completion of this project – Deployed Data Pipeline GCP : A Data Pipeline connecting FieldPulse( https://webapp.fieldpulse.com/ ) to GCP MySQL that is deployed on a client’s GCP VM instance. It updates the data MySQL every hour. It extracts the following data tables FieldPulse – Job Data Tag Data Team Member Data Team Data Maintaining a log file Google : There is a log file to resolve unexpected error quickly if any , log file stores following details – last pipeline synced time Error type if any Error location if any Work Order Data : Job id Work order no. Tags titles Start_time Job_type Created By Status Invoice_status Assigned teams name Project_id Assignment_count Assignable_type Notes Customer_notes Customer_first_name Customer_last_name Location Assigned_team_members name End_time created_at Job Tag Data : Tag ids Company_id Mongo_id Title (Tag name) Type Color Created_at Updated_at deleted_at Setup to Connect GCP MySQL to Google Data Studio(GDS) : Provided a setup to connect GCP MySQL to GDS easily. Client can access his live data MySQL to GDS and make visualizations out of it. Tools used Google Colab Language/techniques used Python Web Scraping MySQL Skills used Programming Python Data Structure & Algorithm Web Scraping File Handling Google Google Data Studio Databases used MySQL Web Servers used Google Platform (GCP) What are the technical Challenges Faced during Project Execution Getting Data FieldPulse : As there is no open source package/library Python for accessing Fieldpulse API , we struggled a lot to get the desired data FieldPulse. Setting Up Connection GCP MySQL to GDS : Due to firewall and VPN , connection was not set up as IP address changes while using VPN. It was showing error every time someone tries to connect to MySQL their Google Studio account. How the Technical Challenges were Solved Getting Data FieldPulse : We did use web scraping for this. We explored all the API addresses. We connected to each possible address and got the data then explored the data. Made a list of addresses which contains data of our interest. Also data is stored a scattered and cascaded manner FieldPulse with ids. , we had to fetch a lot of extra tables and then join multiple tables to get a desired data table. Setting Up Connection GCP MySQL to GDS : To resolve this issue , we did as below – set up the IP address GCP MySQL security to 0.0.0.0 , that any system can access it. (VPN issue resolved) Enabled the SSL GCP MySQL. (to prevent it unauthorized access) Project Video 